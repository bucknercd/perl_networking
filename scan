#!/usr/bin/perl
# NOTE: This file MUST be run as ROOT
#Filename: scan
use strict;
use IO::Socket::INET;
use Net::Ping;
use Data::Dumper;
use Getopt::Long;


use constant ( 
                DEBUG => 0,
	         );

# use Net/Ping.pm in current dir
my $current_dir = `pwd`;
chomp($current_dir);
unshift(@INC, $current_dir);

my ($target, $port_scan, $help);
GetOptions(
            'target=s'  => \$target,
            'port-scan' => \$port_scan,
	        'help'      => \$help,
            '<>'        => \&usage,
          );

if ($help) {
    usage();
}

if (!$target) {
    $target = '127.0.0.1';
}

if (!user_is_root()) {
    exit(1);
}

my $public_ip = get_public_ip();
my $local_ip = get_local_ip();
display_pc_info($public_ip, $local_ip);

my $max_ports = 10000;

$|++; # turn on autoflush
if (substr($target, -2) eq '.0') {
    print "Scanning network $target/24 ...\n=====================================================\n";
    my $base_target = substr($target, 0, -1);
    for (my $i = 1; $i < 255; $i++) {
        $target = $base_target . $i;
	    my $report;
        if (is_alive($target)) {
	        print "\n$target is alive\n\n";
	        if ($port_scan) {
       	        $report .= port_scan($target, $max_ports);
	        }
	        $report .= arp_scan($target);
        }
	    print $report;
    }
} else {
    print "Scanning $target ...\n=====================================================\n";
    my $report;
    if (is_alive($target)) {
	    print "\n$target is alive\n\n";
	    if ($port_scan) {
            $report .= port_scan($target, $max_ports);
	    }
	    $report .= arp_scan($target);
	    print $report;
    }
}



##############################
######     FUNCTIONS     #####
##############################


sub display_pc_info {
    my $public_ip = shift;
    my $local_ip = shift;
    my $user = `whoami`;
    my $hostname = `hostname`;
    chomp($user);
    chomp($hostname);
    print "\nSCAN INFORMATION\n=====================================================\n";
    printf("%-15s%-15s\n%-15s%-15s\n%-15s%-15s\n%-15s%-15s\n\n", "USER:",$user, "HOSTNAME:", $hostname, "PRIVATE IP:", $local_ip, "PUBLIC IP:", $public_ip);
}

sub get_public_ip {
    my $public_ip = 'N/A';
    system("wget -q http://ipchicken.com");
    open(FH, "index.html");
    my @lines = <FH>;
    foreach (@lines) { 
	    if (/((\d{1,3})(\.)){3}\d{1,3}/) { 
	        s/[^0-9.]*//g; 
	        $public_ip = $_; 
        }
    }
    unlink('index.html');
    return $public_ip;
}

sub get_local_ip {
    my $sock = IO::Socket::INET->new(
        Proto => 'udp',
        PeerAddr => '8.8.8.8',
        PeerPort => '53',
    );
    my $local_ip = $sock->sockhost;
    return $local_ip;
}

sub create_sock {
    my $target = shift;
    my $port = shift;
    my $proto = shift || 'tcp';
    my $sock = IO::Socket::INET->new(
	    PeerAddr   =>   $target,
        PeerPort   =>   $port,
        Proto      =>   $proto,
	    Timeout    =>   0.025,
    );
    if (!$sock && DEBUG) {
	    foreach ($@) {
	        print "$_\n";
	    }
    }    
    return $sock;
}

sub is_alive {
    my $host = shift || 'localhost';
    my $ret_val;
    my $p = Net::Ping->new("icmp");
    $p->bind($local_ip);
    if ($p->ping($host, 2)) {
	    print "\n*** $host is reachable. ***\n" if DEBUG;
        $ret_val = 1;
    } else {
	    print "\n$host is NOT reachable.\n" if DEBUG;
        $ret_val = 0;
    }
    $p->close();
    return $ret_val;
}

sub port_scan {
    my $target = shift;
    my $max_ports = shift;
    my $sock;
    my @open_ports;
    my $report = "Scanning first $max_ports on target $target\n";
    for (my $port=1; $port <= $max_ports; $port++) {
        $sock = create_sock($target, $port);
        if (!$sock) {
            print "\nCannot connect on port $port\n" if DEBUG;
        } else {
	        print "\nCan connect to $target:$port\n" if DEBUG;
	        push(@open_ports, $port);
            close($sock);
        }
    }
    $report .= "\nOpen ports detected on target $target:\n   " . join("\n   ", @open_ports) . "\n" if @open_ports;
    return $report;
}

sub arp_scan {
    my $target = shift;
    my $arp_report = "\nARP INFO:\n";
    if ($target eq $local_ip) {
        $arp_report .= "NO ARP DATA (me)\n";
    }

    my $arp_output = `arp -a $target`;
    if ($arp_output =~ /([^:]{2}:[^:]{2}:[^:]{2}:[^:]{2}:[^:]{2})/) {
        my $mac_id = $1;
	    $arp_report .= "$mac_id => ";
    	my $searchable_mac = join('', split(':', $mac_id));
	    $searchable_mac = substr($searchable_mac, 0, 6);
	    my $manufacturer = undef;
	    my $oui_path = '/usr/share/nmap/nmap-mac-prefixes';
	    open(FH, $oui_path) or die "Unable to open OUI file $oui_path\n";
	    my @lines = <FH>;
	    close(FH);
	    my $found = undef;
	    for my $line (@lines) {
	        if ($line =~ /^$searchable_mac (.*)/i) {
	            my $manufacturer = $1;
		        $found++;
		        $arp_report .= "$manufacturer\n";
	        }
	    }

	    if (!$found) {
	        $arp_report .= "unknown\n";
	    }
    }

    return "$arp_report=====================================================\n";
}

sub user_is_root {
    my $user = `whoami`;
    chomp($user);
    if ($user !~ /root/i) {
        print STDERR "This script must be run with user 'root'!\nCurrent user: $user\n\n";
	    return 0;
    }
    return 1;
}

sub usage {
    print "\nUsage: perl $0 [OPTIONAL ARGS]\n";
    print "         OPTIONAL:  --target    --> The target ip address to be scanned. If this argument is not provided localhost (127.0.0.1) will be assumed as target.\n";
    print "                                    Note: If the ip addres ends in zero, it will be assumed that this a /24 subnet and all hosts will be scanned on that subnet.\n";
    print "         OPTIONAL:  --port-scan --> The option to perform a port scan on the target\n";
    print "         OPTINAL:   --help      --> Displays help.\n\n";
    print "i.e.  perl $0 --target 192.168.1.5 --port-scan\n";
    print "i.e.  perl $0 --port-scan\n";
    print "i.e.  perl $0 --target 192.168.1.0 --port-scan\n";
    print "\n\n\n";
    exit(0);
}
